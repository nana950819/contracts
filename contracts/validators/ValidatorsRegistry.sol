pragma solidity 0.5.17;

import "@openzeppelin/upgrades/contracts/Initializable.sol";
import "../collectors/Pools.sol";
import "../collectors/Groups.sol";
import "../collectors/Individuals.sol";
import "../collectors/PrivateIndividuals.sol";
import "../Settings.sol";


/**
 * @title ValidatorsRegistry.
 * Validators registry keeps track of all the registered validators.
 * Only collectors can register validators.
 */
contract ValidatorsRegistry is Initializable {
    /**
    * Structure to store information about the validator.
    * @param depositAmount - validator deposit amount.
    * @param maintainerFee - fee to pay to the maintainer after withdrawal.
    * @param entityId - ID of the entity where the deposit was accumulated.
    */
    struct Validator {
        uint256 depositAmount;
        uint256 maintainerFee;
        bytes32 entityId;
    }

    // maps validator ID (hash of the public key) to the validator information.
    mapping(bytes32 => Validator) public validators;

    // address of the Pools contract.
    Pools private pools;

    // address of the Individuals contract.
    Individuals private individuals;

    // address of the PrivateIndividuals contract.
    PrivateIndividuals private privateIndividuals;

    // address of the Groups contract.
    Groups private groups;

    // address of the Settings contract.
    Settings private settings;

    // checks whether the caller is the Collector contract.
    modifier onlyCollectors() {
        require(
            msg.sender == address(pools) ||
            msg.sender == address(groups) ||
            msg.sender == address(individuals) ||
            msg.sender == address(privateIndividuals),
            "Permission denied."
        );
        _;
    }

    /**
    * Event for tracking registered validators.
    * @param entityId - ID of the entity where the deposit was accumulated.
    * @param pubKey - validator public key.
    * @param withdrawalCredentials - withdrawal credentials used to perform withdrawal for the validator in the beacon chain.
    * @param maintainerFee - fee to pay to the maintainer after the withdrawal.
    * @param stakingDuration - staking duration of the validator.
    * @param depositAmount - validator deposit amount.
    */
    event ValidatorRegistered(
        bytes32 indexed entityId,
        bytes pubKey,
        bytes withdrawalCredentials,
        uint256 maintainerFee,
        uint256 stakingDuration,
        uint256 depositAmount
    );

    /**
    * Constructor for initializing the ValidatorsRegistry contract.
    * @param _pools - address of the Pools contract.
    * @param _individuals - address of the Individuals contract.
    * @param _privateIndividuals - address of the PrivateIndividuals contract.
    * @param _groups - address of the Groups contract.
    * @param _settings - address of the Settings contract.
    */
    function initialize(
        Pools _pools,
        Individuals _individuals,
        PrivateIndividuals _privateIndividuals,
        Groups _groups,
        Settings _settings
    )
        public initializer
    {
        pools = _pools;
        individuals = _individuals;
        privateIndividuals = _privateIndividuals;
        groups = _groups;
        settings = _settings;
    }

    /**
    * Function for registering validators.
    * Can only be called by collectors.
    * @param _pubKey - BLS public key of the validator, generated by the operator.
    * @param _withdrawalCredentials - withdrawal credentials used for the validator withdrawal.
    * @param _entityId - ID of the entity where the validator deposit was accumulated.
    * @param _depositAmount - validator deposit amount.
    * @param _maintainerFee - fee to be payed to the maintainer after staking finished.
    */
    function register(
        bytes calldata _pubKey,
        bytes calldata _withdrawalCredentials,
        bytes32 _entityId,
        uint256 _depositAmount,
        uint256 _maintainerFee
    )
        external onlyCollectors
    {
        bytes32 validatorId = keccak256(abi.encodePacked(_pubKey));
        require(validators[validatorId].entityId == "", "Public key has been already used.");

        Validator memory validator = Validator(
            _depositAmount,
            _maintainerFee,
            _entityId
        );
        validators[validatorId] = validator;
        emit ValidatorRegistered(
            validator.entityId,
            _pubKey,
            _withdrawalCredentials,
            validator.maintainerFee,
            settings.stakingDurations(msg.sender),
            validator.depositAmount
        );
    }

    /**
    * Function for updating existing validators.
    * Can only be called by collectors.
    * @param _validatorId - ID of the validator to update.
    * @param _newEntityId - ID of the new entity, the validator should be assigned to.
    * @param _newMaintainerFee - fee to be payed to the maintainer after staking finished.
    */
    function update(bytes32 _validatorId, bytes32 _newEntityId, uint256 _newMaintainerFee) external onlyCollectors {
        Validator storage validator = validators[_validatorId];
        require(validator.depositAmount == settings.validatorDepositAmount(), "Validator deposit amount cannot be updated.");

        validator.entityId = _newEntityId;
        validator.maintainerFee = _newMaintainerFee;
    }
}
