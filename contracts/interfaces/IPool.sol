// SPDX-License-Identifier: AGPL-3.0-only

pragma solidity 0.7.5;
pragma abicoder v2;

import "./IDepositContract.sol";

/**
 * @dev Interface of the Pool contract.
 */
interface IPool {
    /**
    * @dev Event for tracking new pool withdrawal credentials.
    * @param withdrawalCredentials - new withdrawal credentials for the pool validators.
    */
    event WithdrawalCredentialsUpdated(bytes32 withdrawalCredentials);

    /**
    * @dev Event for tracking registered validators.
    * @param publicKey - validator public key.
    * @param operator - address of the validator operator.
    */
    event ValidatorRegistered(bytes publicKey, address operator);

    /**
    * @dev Event for tracking scheduled deposit activation.
    * @param sender - address of the deposit sender.
    * @param activationTime - the time when the deposit will be activated.
    * @param value - deposit amount to be activated.
    */
    event ActivationScheduled(address indexed sender, uint256 activationTime, uint256 value);

    /**
    * @dev Event for tracking activated deposits.
    * @param account - account the deposit was activated for.
    * @param activationTime - activation time of the deposit.
    * @param value - amount activated.
    * @param sender - address of the transaction sender.
    */
    event Activated(address indexed account, uint256 activationTime, uint256 value, address indexed sender);

    /**
    * @dev Event for tracking activation duration updates.
    * @param activationDuration - new activation duration for the pool deposits.
    * @param sender - address of the transaction sender.
    */
    event ActivationDurationUpdated(uint256 activationDuration, address sender);

    /**
    * @dev Event for tracking updates to the minimal deposit amount considered for the activation period.
    * @param minActivatingDeposit - new minimal deposit amount considered for the activation.
    * @param sender - address of the transaction sender.
    */
    event MinActivatingDepositUpdated(uint256 minActivatingDeposit, address sender);

    /**
    * @dev Event for tracking updates to the total staking amount.
    * @param totalStakingAmount - new total staking amount.
    * @param sender - address of the transaction sender.
    */
    event TotalStakingAmountUpdated(uint256 totalStakingAmount, address sender);

    /**
    * @dev Event for tracking minimum activating share.
    * When it's exceeded, the deposits will be set for the activation.
    * @param minActivatingShare - minimum activating share.
    * @param sender - address of the transaction sender.
    */
    event MinActivatingShareUpdated(uint256 minActivatingShare, address sender);

    /**
    * @dev Structure for passing information about new Validator.
    * @param publicKey - BLS public key of the validator, generated by the operator.
    * @param signature - BLS signature of the validator, generated by the operator.
    * @param depositDataRoot - hash tree root of the deposit data, generated by the operator.
    */
    struct Validator {
        bytes publicKey;
        bytes signature;
        bytes32 depositDataRoot;
    }

    /**
    * @dev Function for upgrading the Pools contract.
    * @param _oracles - address of the Oracles contract.
    * @param _activationDuration - initial activation duration.
    * @param _totalStakingAmount - total staking amount in beacon chain.
    * @param _minActivatingDeposit - minimal deposit in Wei to be considered for the activation period.
    * @param _minActivatingShare - minimal activating share required for considering deposit for the activation.
    */
    function upgrade(
        address _oracles,
        uint256 _activationDuration,
        uint256 _totalStakingAmount,
        uint256 _minActivatingDeposit,
        uint256 _minActivatingShare
    ) external;

    /**
    * @dev Function for retrieving the total staking amount.
    */
    function totalStakingAmount() external view returns (uint256);

    /**
    * @dev Function for retrieving the total collected amount.
    */
    function totalCollectedAmount() external view returns (uint256);

    /**
    * @dev Function for getting the withdrawal credentials used to
    * initiate pool validators withdrawal from the beacon chain.
    */
    function withdrawalCredentials() external view returns (bytes32);

    /**
    * @dev Function for getting the deposit activation duration.
    */
    function activationDuration() external view returns (uint256);

    /**
    * @dev Function for getting the minimal deposit amount considered for the activation.
    */
    function minActivatingDeposit() external view returns (uint256);

    /**
    * @dev Function for getting the minimal activating share.
    * When it's exceeded, the deposits will be set for the activation.
    */
    function minActivatingShare() external view returns (uint256);

    /**
    * @dev Function for getting the amount of activating deposits.
    * @param account - address of the account to get the amount for.
    * @param activationTime - timestamp of the activated amount.
    */
    function activations(address account, uint256 activationTime) external view returns (uint256);

    /**
    * @dev Function for setting minimal deposit amount considered for the activation period.
    * @param _minActivatingDeposit - new minimal deposit amount considered for the activation.
    */
    function setMinActivatingDeposit(uint256 _minActivatingDeposit) external;

    /**
    * @dev Function for setting total staking amount
    * @param _totalStakingAmount - total staking amount of Pool validators in beacon chain.
    */
    function setTotalStakingAmount(uint256 _totalStakingAmount) external;

    /**
    * @dev Function for changing withdrawal credentials.
    * @param _withdrawalCredentials - new withdrawal credentials for the pool validators.
    */
    function setWithdrawalCredentials(bytes32 _withdrawalCredentials) external;

    /**
    * @dev Function for changing the activation duration.
    * @param _activationDuration - new estimated activation duration for new validators.
    */
    function setActivationDuration(uint256 _activationDuration) external;

    /**
    * @dev Function for changing the minimal activating share.
    * @param _minActivatingShare - new minimal activating share. When it's exceeded, the deposits will be set for the activation.
    */
    function setMinActivatingShare(uint256 _minActivatingShare) external;

    /**
    * @dev Function for retrieving the validator registration contract address.
    */
    function validatorRegistration() external view returns (IDepositContract);

    /**
    * @dev Function for adding deposits to the pool.
    */
    function addDeposit() external payable;

    /**
    * @dev Function for minting account's tokens at specific activation time.
    * @param _account - account address to activate the tokens for.
    * @param _activationTime - activation time of the tokens.
    */
    function activate(address _account, uint256 _activationTime) external;

    /**
    * @dev Function for minting account's tokens at multiple activation times.
    * @param _account - account address to activate the tokens for.
    * @param _activationTimes - list of activation times of the tokens.
    */
    function activateMultiple(address _account, uint256[] calldata _activationTimes) external;

    /**
    * @dev Function for registering new pool validator.
    * @param _validator - validator to register.
    */
    function registerValidator(Validator calldata _validator) external;
}
