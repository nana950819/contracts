pragma solidity 0.5.16;

import "@openzeppelin/upgrades/contracts/Initializable.sol";
import "../access/Operators.sol";
import "../validators/IValidatorRegistration.sol";
import "../validators/ValidatorsRegistry.sol";
import "../validators/ValidatorTransfers.sol";
import "../Deposits.sol";
import "../Settings.sol";

/**
 * @title Base Collector
 * Base contract to be inherited by contracts which accumulate deposits for becoming a validator.
 * Implements functionality for registering validators.
 */
contract BaseCollector is Initializable {
    // Tracks accumulated contract ether.
    uint256 public totalSupply;

    // The ID of the next entity which has to accumulate validator deposit amount.
    uint256 public nextEntityId;

    // List of entity IDs which are ready to be registered as validators.
    uint256[] internal readyEntities;

    // Address of the Deposits contract.
    Deposits internal deposits;

    // Address of the Settings contract.
    Settings internal settings;

    // Address of the Operators contract.
    Operators private operators;

    // Address of the VRC (deployed by Ethereum).
    IValidatorRegistration private validatorRegistration;

    // Address of the Validators Registry contract.
    ValidatorsRegistry private validatorsRegistry;

    // Address of the Validator Transfers contract.
    ValidatorTransfers private validatorTransfers;

    // Checks whether collector has ready entities.
    modifier hasReadyEntities() {
        require(readyEntities.length > 0, "There are no ready entities.");
        _;
    }

    /**
    * Constructor for initializing the BaseCollector contract.
    * @dev Must be called by contracts which inherit from it.
    * @param _deposits - Address of the Deposits contract.
    * @param _settings - Address of the Settings contract.
    * @param _operators - Address of the Operators contract.
    * @param _validatorRegistration - Address of the VRC (deployed by Ethereum).
    * @param _validatorsRegistry - Address of the Validators Registry contract.
    * @param _validatorTransfers - Address of the Validator Transfers contract.
    */
    function initialize(
        Deposits _deposits,
        Settings _settings,
        Operators _operators,
        IValidatorRegistration _validatorRegistration,
        ValidatorsRegistry _validatorsRegistry,
        ValidatorTransfers _validatorTransfers
    )
        public initializer
    {
        deposits = _deposits;
        settings = _settings;
        operators = _operators;
        validatorRegistration = _validatorRegistration;
        validatorsRegistry = _validatorsRegistry;
        validatorTransfers = _validatorTransfers;
        nextEntityId = 1;
    }

    /**
    * Function for registering ready entities as validators.
    * @param _pubKey - BLS public key of the validator, generated by the operator.
    * @param _signature - BLS signature of the validator, generated by the operator.
    * @param _depositDataRoot - hash tree root of the deposit data, generated by the operator.
    */
    function registerValidator(
        bytes calldata _pubKey,
        bytes calldata _signature,
        bytes32 _depositDataRoot
    )
        external hasReadyEntities
    {
        require(operators.isOperator(msg.sender), "Permission denied.");

        uint256 entityId = readyEntities[readyEntities.length - 1];
        readyEntities.pop();

        validatorsRegistry.register(_pubKey, entityId);
        uint256 validatorDepositAmount = settings.validatorDepositAmount();
        totalSupply -= validatorDepositAmount;
        validatorRegistration.deposit.value(validatorDepositAmount)(
            _pubKey,
            settings.withdrawalCredentials(),
            _signature,
            _depositDataRoot
        );
    }

    /**
    * Function for transferring Validator ownership to another entity.
    * @param _validatorId - Validator ID from Validators Registry to transfer.
    * @param _currentReward - Validator's current reward to register as debt.
    */
    function transferValidator(bytes32 _validatorId, uint256 _currentReward) external hasReadyEntities {
        require(validatorTransfers.isManager(msg.sender), "Permission denied.");

        (
            uint256 currentDepositAmount,
            uint256 currentMaintainerFee,
            bytes32 currentCollectorEntityId
        ) = validatorsRegistry.validators(_validatorId);

        uint256 entityId = readyEntities[readyEntities.length - 1];
        readyEntities.pop();
        validatorsRegistry.update(_validatorId, entityId);

        uint256 maintainerReward = (_currentReward * currentMaintainerFee) / 10000;
        totalSupply -= currentDepositAmount;
        validatorTransfers.registerTransfer.value(currentDepositAmount)(
            _validatorId,
            currentCollectorEntityId,
            _currentReward - maintainerReward,
            maintainerReward
        );
    }
}
