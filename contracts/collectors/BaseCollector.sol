pragma solidity 0.5.17;

import "@openzeppelin/contracts/math/SafeMath.sol";
import "@openzeppelin/upgrades/contracts/Initializable.sol";
import "../access/Operators.sol";
import "../validators/IValidatorRegistration.sol";
import "../validators/ValidatorsRegistry.sol";
import "../validators/ValidatorTransfers.sol";
import "../Deposits.sol";
import "../Settings.sol";

/**
 * @title Base Collector
 * Base contract to be inherited by contracts which accumulate deposits for becoming a validator.
 * Implements functionality for registering validators.
 */
contract BaseCollector is Initializable {
    using SafeMath for uint256;

    // Tracks accumulated contract ether.
    uint256 public totalSupply;

    // The total number of collector entities.
    uint256 public entitiesCount;

    // List of entity IDs which are ready to be registered as validators.
    bytes32[] internal readyEntityIds;

    // Address of the Deposits contract.
    Deposits internal deposits;

    // Address of the Settings contract.
    Settings internal settings;

    // Address of the Operators contract.
    Operators internal operators;

    // Address of the VRC (deployed by Ethereum).
    IValidatorRegistration internal validatorRegistration;

    // Address of the Validators Registry contract.
    ValidatorsRegistry internal validatorsRegistry;

    // Address of the Validator Transfers contract.
    ValidatorTransfers internal validatorTransfers;

    // Checks whether collector has ready entities.
    modifier hasReadyEntities() {
        require(readyEntityIds.length > 0, "There are no ready entities.");
        _;
    }

    /**
    * Constructor for initializing the BaseCollector contract.
    * @dev Must be called by contracts which inherit from it.
    * @param _deposits - Address of the Deposits contract.
    * @param _settings - Address of the Settings contract.
    * @param _operators - Address of the Operators contract.
    * @param _validatorRegistration - Address of the VRC (deployed by Ethereum).
    * @param _validatorsRegistry - Address of the Validators Registry contract.
    * @param _validatorTransfers - Address of the Validator Transfers contract.
    */
    function initialize(
        Deposits _deposits,
        Settings _settings,
        Operators _operators,
        IValidatorRegistration _validatorRegistration,
        ValidatorsRegistry _validatorsRegistry,
        ValidatorTransfers _validatorTransfers
    )
        public initializer
    {
        deposits = _deposits;
        settings = _settings;
        operators = _operators;
        validatorRegistration = _validatorRegistration;
        validatorsRegistry = _validatorsRegistry;
        validatorTransfers = _validatorTransfers;
        entitiesCount = 1;
    }

    /**
    * Function for counting the number of ready entities.
    */
    function countReadyEntities() public view returns (uint256) {
        return readyEntityIds.length;
    }

    /**
    * Function for registering ready entities as validators.
    * @param _pubKey - BLS public key of the validator, generated by the operator.
    * @param _signature - BLS signature of the validator, generated by the operator.
    * @param _depositDataRoot - hash tree root of the deposit data, generated by the operator.
    */
    function registerValidator(
        bytes calldata _pubKey,
        bytes calldata _signature,
        bytes32 _depositDataRoot
    )
        external hasReadyEntities
    {
        require(operators.isOperator(msg.sender), "Permission denied.");

        bytes32 entityId = readyEntityIds[readyEntityIds.length - 1];
        readyEntityIds.pop();

        validatorsRegistry.register(_pubKey, entityId);
        uint256 validatorDepositAmount = settings.validatorDepositAmount();
        totalSupply -= validatorDepositAmount;
        validatorRegistration.deposit.value(validatorDepositAmount)(
            _pubKey,
            settings.withdrawalCredentials(),
            _signature,
            _depositDataRoot
        );
    }

    /**
    * Function for transferring Validator ownership to another entity.
    * @param _validatorId - ID of the validator to transfer.
    * @param _validatorReward - Validator current reward.
    */
    function transferValidator(bytes32 _validatorId, uint256 _validatorReward) external hasReadyEntities {
        require(operators.isOperator(msg.sender), "Permission denied.");

        (uint256 depositAmount, uint256 prevMaintainerFee, bytes32 prevEntityId) = validatorsRegistry.validators(_validatorId);
        require(prevEntityId != "", "Validator with such ID is not registered.");

        (uint256 prevUserDebt, uint256 prevMaintainerDebt,) = validatorTransfers.validatorDebts(_validatorId);
        // transfer validator to the registration ready entity
        bytes32 newEntityId = readyEntityIds[readyEntityIds.length - 1];
        readyEntityIds.pop();
        validatorsRegistry.update(_validatorId, newEntityId);

        uint256 prevEntityReward = _validatorReward.sub(prevUserDebt).sub(prevMaintainerDebt);
        uint256 maintainerDebt = (prevEntityReward.mul(prevMaintainerFee)).div(10000);
        totalSupply = totalSupply.sub(depositAmount);
        validatorTransfers.registerTransfer.value(depositAmount)(
            _validatorId,
            prevEntityId,
            prevEntityReward.sub(maintainerDebt),
            maintainerDebt
        );
    }
}
